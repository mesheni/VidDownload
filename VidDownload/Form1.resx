<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>